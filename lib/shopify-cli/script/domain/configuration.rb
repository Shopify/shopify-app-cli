# frozen_string_literal: true

module ShopifyCli
  module ScriptModule
    module Domain
      class Configuration
        attr_reader :id, :schema_name, :schema, :glue_code

        def initialize(id, schema_name, schema, glue_code)
          @id = id
          @schema_name = schema_name
          @schema = validate_schema(schema)
          @glue_code = glue_code
        end

        def generate_glue_code!(graphql_to_language_builder)
          header_warning_message =
            "This file is automatically derived from schema #{@id}/#{@schema_name}." \
            "Do not edit this file directly.  Please use command 'shopify script generate glue-code' " \
            "to regenerate this code."
          @glue_code = graphql_to_language_builder.build(schema, header_warning_message)
        end

        private

        def validate_schema(schema_source)
          require "graphql"
          schema = GraphQL::Schema.from_definition(schema_source)
          query = schema.query
          single_entry_point = query.fields.length == 1
          input_entry_point = query.fields.values.first.type.is_a?(GraphQL::InputObjectType)

          raise_invalid_schema("schema must contain exactly one entry point") unless single_entry_point
          raise_invalid_schema("schema entrypoint must be of type input") unless input_entry_point

          schema_source
        rescue GraphQL::Error => e
          raise_invalid_schema(e.message)
        end

        def raise_invalid_schema(message)
          raise Domain::InvalidConfigurationSchemaError, message
        end
      end
    end
  end
end
