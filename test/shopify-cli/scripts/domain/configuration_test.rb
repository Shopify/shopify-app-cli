# frozen_string_literal: true

require "test_helper"

describe ShopifyCli::ScriptModule::Domain::Configuration do
  let(:id) { "#{ShopifyCli::ScriptModule::Infrastructure::Repository::SOURCE_PATH}/discount/myscript/configuration" }
  let(:schema_name) { "configuration.schema" }
  let(:schema) do
    <<~GRAPHQL
      input Configuration {
        _: Boolean
      }

      type Query {
        configuration: Configuration
      }
    GRAPHQL
  end
  let(:glue_code) { "int i" }

  describe ".new" do
    subject { ShopifyCli::ScriptModule::Domain::Configuration.new(id, schema_name, schema, glue_code) }

    it "should construct new Configuration" do
      configuration = subject
      assert_equal id, configuration.id
      assert_equal schema_name, configuration.schema_name
      assert_equal schema, configuration.schema
      assert_equal glue_code, configuration.glue_code
    end

    describe "configuration schema with multiple entrypoints" do
      let(:schema) do
        <<~GRAPHQL
          input Configuration {
            _: Boolean
          }

          type Query {
            configuration: Configuration
            foo: Int
          }
        GRAPHQL
      end

      it "should enforce a single entrypoint in the schema" do
        assert_raises ShopifyCli::ScriptModule::Domain::InvalidConfigurationSchemaError do
          subject
        end
      end
    end

    describe "configuration schema with non-input entrypoint" do
      let(:schema) do
        <<~GRAPHQL
          type Configuration {
            _: Boolean
          }

          type Query {
            configuration: Configuration
          }
        GRAPHQL
      end

      it "should enforce a single input type entrypoint" do
        assert_raises ShopifyCli::ScriptModule::Domain::InvalidConfigurationSchemaError do
          subject
        end
      end
    end

    describe "configuration schema with non-composite entrypoint" do
      let(:schema) do
        <<~GRAPHQL
          type Query {
            configuration: Input
          }
        GRAPHQL
      end

      it "should enforce a single composite entrypoint" do
        assert_raises ShopifyCli::ScriptModule::Domain::InvalidConfigurationSchemaError do
          subject
        end
      end
    end
  end

  describe ".generate_glue_code!" do
    let(:configuration) { ShopifyCli::ScriptModule::Domain::Configuration.new(id, schema_name, schema, glue_code) }
    let(:graphql_to_language_builder) { Minitest::Mock.new }
    let(:header_message) do
      "This file is automatically derived from schema #{id}/#{schema_name}." \
      "Do not edit this file directly.  Please use command 'shopify script generate glue-code' " \
      "to regenerate this code."
    end

    subject { configuration.generate_glue_code!(graphql_to_language_builder) }

    describe "valid configuration schema" do
      it "should use graphql_to_language_builder to generate the glue code" do
        graphql_to_language_builder.expect(:build, glue_code, [schema, header_message])
        subject
        assert_equal glue_code, configuration.glue_code
      end
    end
  end
end
